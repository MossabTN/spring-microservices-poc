def label = "worker-${UUID.randomUUID().toString()}"

podTemplate(
        label: label,
        containers: [
                containerTemplate(name: 'maven', image: 'maven:3.6.3-openjdk-11', command: 'cat', ttyEnabled: true),
                containerTemplate(name: 'kaniko', image: 'gcr.io/kaniko-project/executor:debug', command: '/busybox/cat', ttyEnabled: true),
                containerTemplate(name: 'kubectl', image: 'bitnami/kubectl:1.20.2', command: 'cat', ttyEnabled: true)
        ],
        volumes: [
                hostPathVolume(mountPath: '/var/run/docker.sock', hostPath: '/var/run/docker.sock'),
                persistentVolumeClaim(mountPath: '/root/.m2', claimName: 'maven-repo', readOnly: false)
        ]) {
    node(label) {
        stage('Checkout') {
            def myRepo = checkout scm
            def gitCommit = myRepo.GIT_COMMIT
            def gitBranch = myRepo.GIT_BRANCH
            def shortGitCommit = "${gitCommit[0..10]}"
            def previousGitCommit = sh(script: "git rev-parse ${gitCommit}~", returnStdout: true)
            def version = 'latest'
        }
        dir("notification-service") {
            try {
                stage('Test') {
                    try {
                        container('maven') {
                            version = sh script: 'mvn help:evaluate -Dexpression=project.version -q -DforceStdout', returnStdout: true
                            version = version.substring(0, version.length() - 9)
                            //sh 'mvn test'
                            sh 'mvn -DskipTests=true clean compile'
                        }
                    }
                    catch (exc) {
                        println "Failed to test - ${currentBuild.fullDisplayName}"
                        throw (exc)
                    }
                }
                stage('SonarQube analysis') {
                    container('maven') {
                        withSonarQubeEnv(credentialsId: 'sonarqube', installationName: 'sonarqube.maxilog.me') {
                            sh 'mvn sonar:sonar'
                        }
                        timeout(time: 5, unit: 'MINUTES') {
                            def qg = waitForQualityGate()
                            if (qg.status != 'OK') {
                                error "Pipeline aborted due to quality gate failure: ${qg.status}"
                            }
                        }
                    }
                }
                stage('Build') {
                    container('maven') {
                        sh 'mvn -B clean package -Dmaven.test.skip=true -Dfindbugs.fork=false'
                    }
                }
                stage('Create Docker images') {
                    container('kaniko') {
                        withCredentials([usernamePassword(credentialsId: 'nexus', passwordVariable: 'NEXUS_PASSWORD', usernameVariable: 'NEXUS_USERNAME')]) {
                            def credentials = sh(script: "printf \"%s:%s\" \"${NEXUS_USERNAME}\" \"${NEXUS_PASSWORD}\" | base64 | tr -d '\n'", returnStdout: true)
                            sh "echo '{\"auths\":{\"docker.maxilog.me\":{\"auth\":\"${credentials}\"}}}' > /kaniko/.docker/config.json"
                            sh "/kaniko/executor --dockerfile Dockerfile --context `pwd`/  --insecure --skip-tls-verify --cache=true --destination=docker.maxilog.me/poc/spring/notification:${version}"
                        }
                    }
                }
            } catch (e) {
                currentBuild.result = "FAILED"
                throw e
            } finally {

            }
        }
    }
}
